contract interface OracleConnector =
    payable entrypoint query : (string) => bytes(32)
    entrypoint getAnswer : (bytes(32)) => option(string)
    entrypoint canCallBack: () => bool
    entrypoint getBaseFee: () => int

contract interface OraclesManager =
    entrypoint getAddress : (string) => address
    entrypoint setContractOracle : (string) => bool
    entrypoint getContractOracle : (address) => string
    entrypoint getListOfOracles : () => list(string)

namespace Say =

    record setup = {
        oracle_address: OraclesManager,
        oracle_connector: OracleConnector
      }
    // Must run this to select oracle at init
    public function setOracle(oracle_id: string) : bool =
        let _oracle_address : OraclesManager = ct_utMHaqF7wtV6fHFkGC8MiJ3zQeCwsviUayRTrpHTCAGMat6GU
        _oracle_address.setContractOracle(oracle_id)
    
    public function getOracleId() : string =
        let _oracle_address : OraclesManager = ct_utMHaqF7wtV6fHFkGC8MiJ3zQeCwsviUayRTrpHTCAGMat6GU
        _oracle_address.getContractOracle(Call.caller)

    public function set() : setup =
        let _oracle_address : OraclesManager = ct_utMHaqF7wtV6fHFkGC8MiJ3zQeCwsviUayRTrpHTCAGMat6GU
        let _oracle_connector : OracleConnector = Address.to_contract(_oracle_address.getAddress(getOracleId()))
        
        {oracle_address = _oracle_address, oracle_connector = _oracle_connector}
    
    public function getOracleAddress() : address =
        set().oracle_address.getAddress(getOracleId())

    public function canCallBack() : bool =
        set().oracle_connector.canCallBack()
    
    public function getBaseFee() : int =
        set().oracle_connector.getBaseFee()

    public function getAnswer(query_id: bytes(32)) : option(string) =
        set().oracle_connector.getAnswer(query_id)

    stateful function query(args: string, value_received: int) : bytes(32) =
        set().oracle_connector.query(args, value = value_received)

    public function availableOracles() : list(string) =
        set().oracle_address.getListOfOracles()

